server.port=80
## datasource  연결
spring.profiles.include=db



##jsp view 연결
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp


## message  파일의 위치가 어디인가
spring.messages.basename=message/message



### Hibernate 연결
# table 생성
spring.jpa.hibernate.ddl-auto=none

## create :  기존 테이블 삭제 후 다시 생성
## create-drop : create이랑 같으나 application 종료시점에 자동으로 drop(컴퓨터끄면 테이블 삭제)
## update : 변경된 부분만 적용
## validate  엔티티(vo)와 테이블이 정상적으로 매핑 되었는지 확인
## none :  사용하지 않을 때
## 개발시에는  편의를 위해 create,create-drop
## 운영시에는 update,validate,none 

## vo 클래스의 멤버변수명이 자동으로 db에 컬럼명과 연결될 때
## regDate 의 형태라면 설정이 필요함(카멜표기법)
## reg_date 의 형태면 설정이 필요없음(스네이크표기법)
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

###JPA에 의해 자동으로 생성되고 실행되는 sql문을 실시간으로 출력하는 설정을 할 수 있다.
logging.level.org.hibernate.sql =debug

## ?애 매핑되는 파라미터 값을 출력
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

## Hibernate가 실행한 SQL 출력
spring.jpa.show-sql=true

## 하이버네이트가 실행한 sql문을 출력할 때 보기 쉽게 출력
spring.jpa.properties.hibernate.format_sql=true

### transaction 처리
spring.aop.proxy-target-class=true

board.member.filePath=upload/member
board.notice.filePath=upload/notice
